/*!
 * ASP.NET SignalR JavaScript Library v2.2.2
 * http://signalr.net/
 *
 * Copyright (c) .NET Foundation. All rights reserved.
 * Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
 *
 */

/// <reference path="..\..\SignalR.Client.JS\Scripts\jquery-1.6.4.js" />
/// <reference path="jquery.signalR.js" />
(function ($, window, undefined) {
    /// <param name="$" type="jQuery" />
    "use strict";

    if (typeof ($.signalR) !== "function") {
        throw new Error("SignalR: SignalR is not loaded. Please ensure jquery.signalR-x.js is referenced before ~/signalr/js.");
    }

    var signalR = $.signalR;

    function makeProxyCallback(hub, callback) {
        return function () {
            // Call the client hub method
            callback.apply(hub, $.makeArray(arguments));
        };
    }

    function registerHubProxies(instance, shouldSubscribe) {
        var key, hub, memberKey, memberValue, subscriptionMethod;

        for (key in instance) {
            if (instance.hasOwnProperty(key)) {
                hub = instance[key];

                if (!(hub.hubName)) {
                    // Not a client hub
                    continue;
                }

                if (shouldSubscribe) {
                    // We want to subscribe to the hub events
                    subscriptionMethod = hub.on;
                } else {
                    // We want to unsubscribe from the hub events
                    subscriptionMethod = hub.off;
                }

                // Loop through all members on the hub and find client hub functions to subscribe/unsubscribe
                for (memberKey in hub.client) {
                    if (hub.client.hasOwnProperty(memberKey)) {
                        memberValue = hub.client[memberKey];

                        if (!$.isFunction(memberValue)) {
                            // Not a client hub function
                            continue;
                        }

                        subscriptionMethod.call(hub, memberKey, makeProxyCallback(hub, memberValue));
                    }
                }
            }
        }
    }

    $.hubConnection.prototype.createHubProxies = function () {
        var proxies = {};
        this.starting(function () {
            // Register the hub proxies as subscribed
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, true);

            this._registerSubscribedHubs();
        }).disconnected(function () {
            // Unsubscribe all hub proxies when we "disconnect".  This is to ensure that we do not re-add functional call backs.
            // (instance, shouldSubscribe)
            registerHubProxies(proxies, false);
        });

        proxies['agentWorkspace'] = this.createHubProxy('agentWorkspace'); 
        proxies['agentWorkspace'].client = { };
        proxies['agentWorkspace'].server = {
            subscribe: function (key, realtimeToken) {
                return proxies['agentWorkspace'].invoke.apply(proxies['agentWorkspace'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (key) {
                return proxies['agentWorkspace'].invoke.apply(proxies['agentWorkspace'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['botOperation'] = this.createHubProxy('botOperation'); 
        proxies['botOperation'].client = { };
        proxies['botOperation'].server = {
            subscribe: function (companyId, realtimeToken) {
                return proxies['botOperation'].invoke.apply(proxies['botOperation'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (companyId) {
                return proxies['botOperation'].invoke.apply(proxies['botOperation'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['conversation'] = this.createHubProxy('conversation'); 
        proxies['conversation'].client = { };
        proxies['conversation'].server = {
            subscribe: function (key, filter, realtimeToken) {
                return proxies['conversation'].invoke.apply(proxies['conversation'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (key) {
                return proxies['conversation'].invoke.apply(proxies['conversation'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['conversationFlowTransition'] = this.createHubProxy('conversationFlowTransition'); 
        proxies['conversationFlowTransition'].client = { };
        proxies['conversationFlowTransition'].server = {
            subscribe: function (flowObjectId, realtimeToken) {
                return proxies['conversationFlowTransition'].invoke.apply(proxies['conversationFlowTransition'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (flowObjectId) {
                return proxies['conversationFlowTransition'].invoke.apply(proxies['conversationFlowTransition'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['conversationLanguage'] = this.createHubProxy('conversationLanguage'); 
        proxies['conversationLanguage'].client = { };
        proxies['conversationLanguage'].server = {
            subscribe: function (convId, realtimeToken) {
                return proxies['conversationLanguage'].invoke.apply(proxies['conversationLanguage'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (convId) {
                return proxies['conversationLanguage'].invoke.apply(proxies['conversationLanguage'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['conversationMessage'] = this.createHubProxy('conversationMessage'); 
        proxies['conversationMessage'].client = { };
        proxies['conversationMessage'].server = {
            subscribe: function (convId, realtimeToken, metadataJson) {
                return proxies['conversationMessage'].invoke.apply(proxies['conversationMessage'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (convId) {
                return proxies['conversationMessage'].invoke.apply(proxies['conversationMessage'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['conversationModification'] = this.createHubProxy('conversationModification'); 
        proxies['conversationModification'].client = { };
        proxies['conversationModification'].server = {
            subscribe: function (convId, realtimeToken) {
                return proxies['conversationModification'].invoke.apply(proxies['conversationModification'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (convId) {
                return proxies['conversationModification'].invoke.apply(proxies['conversationModification'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['exportDefinition'] = this.createHubProxy('exportDefinition'); 
        proxies['exportDefinition'].client = { };
        proxies['exportDefinition'].server = {
            subscribe: function (companyId, realtimeToken) {
                return proxies['exportDefinition'].invoke.apply(proxies['exportDefinition'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (companyId) {
                return proxies['exportDefinition'].invoke.apply(proxies['exportDefinition'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['messengerEvent'] = this.createHubProxy('messengerEvent'); 
        proxies['messengerEvent'].client = { };
        proxies['messengerEvent'].server = {
            register: function (messengerChannelServiceId) {
                return proxies['messengerEvent'].invoke.apply(proxies['messengerEvent'], $.merge(["Register"], $.makeArray(arguments)));
             },

            sendEvents: function (messengerEvents) {
                return proxies['messengerEvent'].invoke.apply(proxies['messengerEvent'], $.merge(["SendEvents"], $.makeArray(arguments)));
             }
        };

        proxies['notification'] = this.createHubProxy('notification'); 
        proxies['notification'].client = { };
        proxies['notification'].server = {
            subscribe: function (recipientId, realtimeToken) {
                return proxies['notification'].invoke.apply(proxies['notification'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (recipientId) {
                return proxies['notification'].invoke.apply(proxies['notification'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['searchIndexDocument'] = this.createHubProxy('searchIndexDocument'); 
        proxies['searchIndexDocument'].client = { };
        proxies['searchIndexDocument'].server = {
            subscribe: function (companyId, realtimeToken) {
                return proxies['searchIndexDocument'].invoke.apply(proxies['searchIndexDocument'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (companyId) {
                return proxies['searchIndexDocument'].invoke.apply(proxies['searchIndexDocument'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['uiViewer'] = this.createHubProxy('uiViewer'); 
        proxies['uiViewer'].client = { };
        proxies['uiViewer'].server = {
            subscribe: function (id, realtimeToken, metadataJson) {
                return proxies['uiViewer'].invoke.apply(proxies['uiViewer'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (id) {
                return proxies['uiViewer'].invoke.apply(proxies['uiViewer'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['userInfo'] = this.createHubProxy('userInfo'); 
        proxies['userInfo'].client = { };
        proxies['userInfo'].server = {
            subscribe: function (userid, realtimeToken) {
                return proxies['userInfo'].invoke.apply(proxies['userInfo'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (userid) {
                return proxies['userInfo'].invoke.apply(proxies['userInfo'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        proxies['versionSet'] = this.createHubProxy('versionSet'); 
        proxies['versionSet'].client = { };
        proxies['versionSet'].server = {
            subscribe: function (companyId, realtimeToken) {
                return proxies['versionSet'].invoke.apply(proxies['versionSet'], $.merge(["Subscribe"], $.makeArray(arguments)));
             },

            unsubscribe: function (companyId) {
                return proxies['versionSet'].invoke.apply(proxies['versionSet'], $.merge(["Unsubscribe"], $.makeArray(arguments)));
             }
        };

        return proxies;
    };

    signalR.hub = $.hubConnection("/signalr", { useDefaultPath: false });
    $.extend(signalR, signalR.hub.createHubProxies());

}(window.jQuery, window));